#!/usr/bin/perl

use strict;
use warnings;
use lib qw( . .. lib ../lib );
use saR;
use Pod::Usage;
use Carp;
use Data::Dumper;

use Getopt::Long qw(:config bundling);

our $VERSION = '0.01';

=head1 NAME

saRdump - Dump data in a usable form from sar text files

=head1 USAGE

  saRdump [-d dir1,dir2] [-e txt] -H -C -D [-c "proc/s,INTR:*,CPU:%user,CPU:%sys"] [ machine1 ... ]

=head1 DESCRIPTION

saRdump will enable you to load sar data in multiple text files from
multiple machines, and dump them in (hopefully) usable format for
statistics.

=head1 REQUIRED ARGUMENTS

None.
By default, all files ending with extension C<txt> in current directory
will be used as machines sar data files.

=head1 OPTIONS

The following options are supported:

=over 4

=item * -d dir1,dir2

Comma separated list of directories to search for data files.

Default: C<.>

B<Caveat:> Jokers are allowed here, and will be extended using glob. You
will hence need to protect them from the shell expanding them by
escaping them.

=item * -e <ext1,ext2>

Comma separated list of file extensions to match a data file name.

Default: C<txt>

=item * -I

Dump machine info found in the header (not really sar) if any.

=item * -C

Dump sar data column headers found in the file on stderr output.

=item * -D 

Dump data into csv files per index type.

=item * -c cols

Only dumps those data columns in resulting files.

=back

=head1 DIAGNOSTICS

Please tell me when it crashes. Still in development.

=head1 EXIT STATUS

Not defined, beware.

=head1 CONFIGURATION

Only through CLI parameters & options.

=head1 DEPENDENCIES

saRdump relies on Perl modules C<saR> & C<saR::Load> and some standard
modules.

=head1 INCOMPATIBILITIES

Only lightly tested with Linux sysstat(1) output.

=head1 BUGS AND LIMITATIONS

Lots.

=head1 AUTHOR 

Jérôme Fenal, C<< <jfenal at redhat.com> >>

=head1 LICENSE AND COPYRIGHT

Copyright 2012 Jerome Fenal, all rights reserved.

This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

#
# analyze options
#
my ( $extensions, $dirs, $cols );
my ( $dump_info, $dump_data, $dump_headers ) = ( 0, 0, 0 );

# Set defaults
$extensions = 'txt';
$dirs       = q(.);
$cols       = q();

my $result = GetOptions(
    'e|extensions=s' => \$extensions,
    'd|dirs=s'       => \$dirs,
    'c|cols=s'       => \$cols,
    'I|info'         => \$dump_info,
    'C|headers'      => \$dump_headers,
    'D|data'         => \$dump_data,
  )
  or pod2usage(
    -exitval => 254,
    -verbose => 99,
  );

my @dirs = split qr{,}imxs, $dirs;

# expand globs in dirs
@dirs = map { glob($_) } @dirs;
my @exts = split qr{,}imxs, $extensions;

my $s = saR->new( dir => \@dirs, ext => \@exts );

if ( defined $ENV{DEBUG} ) {
    print STDERR Dumper($s);
}

my @info = qw(hwmodel cpumodel cpus cores ram oslevel san);

#
# Dump base info
#
if ($dump_info) {

    # get base info
    my %base_info = $s->base_info();

    # dump it.
    foreach my $m ( keys %base_info ) {
        my %bi = %{ $base_info{$m} };
        print join q(;), $m, @bi{@info};

        print "\n";
    }
}

if ($dump_data) {
    my $data = $s->data();

    # data
    # timestamp machine noidx all% %metrics ...
    # timestamp machine INDEX:idx all% %metrics ...
    print Dumper  $data;
}

if ($dump_headers) {
    my $headers = $s->headers();

    foreach my $index ( sort keys %{$headers} ) {
        print "$index:\n";
        foreach my $col (
            sort { $headers->{$index}->{$a} <=> $headers->{$index}->{$b} }
            keys %{ $headers->{$index} } )
        {
            print "    $col: $headers->{$index}->{$col}\n";

        }
    }
}

